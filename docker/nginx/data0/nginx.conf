

# 设置环境变量 宿主機IP
env HOST_IP=172.24.10.196;

# HMAC-SHA256 簽名函數密鑰
env SECRET_KEY=your-testKey-key;




events {
    # worker_connections  1024;  ## Default: 1024
}

http {

    #使用自己寫的 lua *需要在Docker 容器掛載
    lua_package_path "/etc/nginx/lua/?.lua;;";

    # 定義一個共享內存字典 Hash Table (有原子性)，用於存儲剩餘票數，大小為 1MB 需要支持 Lua 的Nginx
    lua_shared_dict ticket_pool 1m;

    # 分配共享内存 request_queue 給 init_worker.lua 和 location /bookNginx-ticket 裡的 local queue = ngx.shared.request_queue 使用
    lua_shared_dict request_queue 10m;

    # 在 http 块中使用 init_worker_by_lua_file
    init_worker_by_lua_file /etc/nginx/lua/init_worker.lua;


    server {
        listen 80;  # 服務器監聽端口 80

        # 提供接收请求的接口 content_by_lua_file 執行腳本(範例)
        location /enqueue {
            content_by_lua_file /etc/nginx/lua/enqueue.lua;
        }

        # ------------------  Nginx過濾沒搶到票的 + RabbitMq 解決同時大量進到後端 ----------------------

        # 初始化票數的接口
        location /initNginx-ticket {
            access_by_lua_block {
                -- 設置內容類型為 JSON，字符集為 UTF-8
                ngx.header.content_type = "application/json; charset=utf-8"

                --  從請求參數中獲取初始化票數，默認為 1000 張
                local args = ngx.req.get_uri_args()
                local init_ticket_count = tonumber(args["count"]) or 1000
                local init_ticket_area = args["area"]
                if not init_ticket_area or init_ticket_area == "" then
                    ngx.say("area parameter is missing")
                    return
                end

                --  獲取共享內存字典，用於存儲剩餘票數
                local tickets = ngx.shared.ticket_pool

                --  嘗試獲取當前的票數 key : 前端傳來 init_ticket_area
                local remaining_tickets = tickets:get(init_ticket_area)

                --  如果票數已經初始化（存在），則不重複初始化
                if remaining_tickets then
                    local inited = {
                        status = "success",
                        tickets_count = remaining_tickets,
                        message = "票數已經初始化"
                    }
                    ngx.say(require("cjson").encode(inited))
                    ngx.exit(ngx.HTTP_OK)
                end

                --  初始化票數 key : 前端傳來
                tickets:set(init_ticket_area, init_ticket_count)
                remaining_tickets = init_ticket_count
                local init = {
                    status = "success",
                    tickets_count = remaining_tickets,
                    message = "票數初始化成功"
                }
                ngx.say(require("cjson").encode(init))
                ngx.exit(ngx.HTTP_OK)
            }
        }

        # 搶一張票的接口
        location /bookNginx-ticket {
            content_by_lua_block {
                local host_ip = os.getenv("HOST_IP")
                local rabbitmq = require "rabbitmqstomp"
                local cjson = require "cjson"
                local openssl_hmac = require "resty.openssl.hmac"
                local resty_str = require "resty.string"
                local queue = ngx.shared.request_queue
                local secret_key = os.getenv("SECRET_KEY")


                -- 接收前端發送的數據 POST
                ngx.req.read_body()  -- 讀取請求體數據
                local body_data = ngx.req.get_body_data()  -- 獲取請求體內容

                local body_parameter
                local userId
                local ticket_name
                local area
                local book_time = os.time()

                if body_data then
                    body_parameter = cjson.decode(body_data)  -- 解析 JSON 字符串為 Lua 表格
                    userId = body_parameter.userId
                    ticket_name = body_parameter.ticketName
                    area = body_parameter.area
                else
                    ngx.say("No data received from frontend")
                    return
                end
                if not userId or userId == "" or
                   not ticket_name or ticket_name == "" or
                   not area or area == "" then
                    ngx.say("Missing required parameters")
                    return
                end

                -- 嘗試從共享字典中獲取剩餘票數 key : 需要配合/initNginx-ticket創建的 area key
                local tickets = ngx.shared.ticket_pool
                local remaining_tickets = tickets:get(area)

                -- 檢查票數是否已初始化
                if remaining_tickets == nil then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say('{"status": "error", "message": "上未初始化"}')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                    return
                end

                -- ** (重點) 剩多少票 和 減少一張票 必須同時完成 才符合原子性
                local lastTickts = tickets:incr(area, -1)
                if lastTickts <= -1 then
                    -- 回補1
                    tickets:incr(area, 1)
                    ngx.say('{"status": "error", "message": "票已售罄"}')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                    return
                else

                end


                -- HMAC-SHA256 簽名函數
                local function generate_hmac_sha256(key, msg)
                    local hmac = openssl_hmac.new(key, "sha256")
                    local digest = hmac:final(msg)
                    return resty_str.to_hex(digest)
                end


                local sha256_data = string.format("%s_%s_%s_%s", ticket_name, userId, area, book_time)

                local ticket_token = generate_hmac_sha256(secret_key, sha256_data)

                -- 構建發送MQ JSON 格式的消息
                local mq_json = cjson.encode({
                    ticketName = ticket_name,
                    userId = userId,
                    area = area,
                    bookTime = book_time,
                    ticketToken = ticket_token
                })

                -- 增加 write_point 加入ＭＱ發送緩衝區
                local write_point, err = queue:incr("write_point", 1, 0) -- 初始值为 0
                if not write_point then
                    ngx.status = 500
                    ngx.say("Failed to increment write_point: ", err)
                    return
                end

                local success, err = queue:set(write_point, mq_json)
                if not success then
                    ngx.status = 500
                    ngx.say("Failed to enqueue data: ", err)
                    return
                end

                local url = "http://127.0.0.1:8080/ticket/nginx/checkoutTicket/" .. ticket_token
                local response_json = cjson.encode({
                    ticketName = ticket_name,
                    userId = userId,
                    bookTime = book_time,
                    area = area,
                    ticketToken = ticket_token,
                    message = "搶到",
                    status = "success",
                    url = url
                }):gsub("\\/", "/")
                ngx.say(response_json)
            }
        }




        # 補票接口(以初始化好的票再添加)
        location /addTicketNginx-ticket {
            content_by_lua_block {

                local cjson = require "cjson"
                ngx.header.content_type = "application/json; charset=utf-8"
                local args = ngx.req.get_uri_args()
                local addQuantity = tonumber(args["addQuantity"])
                local area = tostring(args["area"])
                if not addQuantity or not area or area == "" then
                    ngx.say("area parameter is missing")
                    return
                end

                local tickets = ngx.shared.ticket_pool
                local remaining_tickets = tickets:get(area)
                if remaining_tickets == nil then
                    local response_json = cjson.encode({
                        addQuantity = addQuantity,
                        area = area,
                        message = "上未初始化",
                        status = "error",
                    }):gsub("\\/", "/")
                    ngx.say(response_json)
                    return
                end

                local lastTickts = tickets:incr(area, addQuantity)
                local response_json = cjson.encode({
                    addQuantity = addQuantity,
                    area = area,
                    message = "添加成功",
                    status = "success",
                }):gsub("\\/", "/")
                ngx.say(response_json)
            }
        }


        # ------------------  只用Nginx過濾沒搶到票的  ----------------------

        # 初始化票數的接口
        location /init-ticket {
            access_by_lua_block {
                -- 設置內容類型為 JSON，字符集為 UTF-8
                ngx.header.content_type = "application/json; charset=utf-8"

                --  獲取共享內存字典，用於存儲剩餘票數
                local tickets = ngx.shared.ticket_pool

                --  嘗試獲取當前的票數 key : remaining_tickets
                local remaining_tickets = tickets:get("remaining_tickets")

                --  如果票數已經初始化（存在），則不重複初始化
                if remaining_tickets then
                    local inited = {
                        status = "success",
                        tickets_count = remaining_tickets,
                        message = "票數已經初始化"
                    }
                    ngx.say(require("cjson").encode(inited)) -- 將表轉換為 JSON 字符串並輸出
                    ngx.exit(ngx.HTTP_OK)
                end

                --  http://localhost/init-ticket?count=500
                --  從請求參數中獲取初始化票數，默認為 1000 張
                local args = ngx.req.get_uri_args()
                local init_ticket_count = tonumber(args["count"]) or 1000

                --  初始化票數 key : remaining_tickets
                tickets:set("remaining_tickets", init_ticket_count)
                remaining_tickets = init_ticket_count
                local init = {
                    status = "success",
                    tickets_count = remaining_tickets,
                    message = "票數初始化成功"
                }
                ngx.say(require("cjson").encode(init)) -- 將表轉換為 JSON 字符串並輸出
                ngx.exit(ngx.HTTP_OK)  -- 返回 HTTP 200 狀態碼，表示請求成功
            }
        }

        # 進行搶票的接口

        # 調用 Java API
        location  /internal-book-ticket {
            proxy_pass http://172.24.10.33:8080/ticket/nginx/bookTicket;  # 轉發到 Java 服務 docker起的話要用宿主機IP
        }
        location /book-ticket {
            access_by_lua_block {
                ngx.header.content_type = "application/json; charset=utf-8"

                -- 嘗試從共享字典中獲取剩餘票數 key : remaining_tickets
                local tickets = ngx.shared.ticket_pool
                local remaining_tickets = tickets:get("remaining_tickets")

                -- 檢查票數是否已初始化
                if remaining_tickets == nil then
                    ngx.say('{"status": "error", "message": "票數未初始化"}')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                    return
                end

                -- ** (重點) 剩多少票 和 減少一張票 必須同時完成 才符合原子性 key : remaining_tickets
                if tickets:incr("remaining_tickets", -1) <= -1 then
                    ngx.say('{"status": "error", "message": "票已售罄"}')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                    return
                end


                -- 調用 Java API 進行判斷
                local res = ngx.location.capture('/internal-book-ticket')
                if res.status ~= ngx.HTTP_OK then
                    ngx.say('{"status": "error", "message": "JAVA服務連接異常"}')
                    ngx.exit(ngx.HTTP_OK)
                    return
                end

                local cjson = require "cjson"  -- 確保 cjson 被引入
                local java_response = cjson.decode(res.body)

                -- 判斷解析後的結果
                if java_response.statusCode == 0 then
                    -- 如果 Java 服務返回成功

                    -- 減少票放在這裡會導致在等JAVA時上面 < 1 還是會成立近來這導致不一致
                    -- local new_ticket_count = tickets:incr("remaining_tickets", -1)  -- 減少一張票

                    local new_ticket_count = tickets:get("remaining_tickets")

                    local response = {
                        status = "success",
                        tickets_count = new_ticket_count,
                        java_rep_count = java_response.data,
                        message = "搶票成功"
                    }

                    ngx.say(require("cjson").encode(response)) -- 將表轉換為 JSON 字符串並輸出
                    ngx.exit(ngx.HTTP_OK)  -- 返回 HTTP 200 狀態碼，表示請求成功
                else
                    ngx.say('{"status": "error", "message": "JAVA服務連接異常"}')
                    ngx.exit(ngx.HTTP_OK)
                end
            }
        }
    }
}
